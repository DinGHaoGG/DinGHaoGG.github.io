<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初建博客</title>
    <url>/2021/09/08/%E5%88%9D%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>感谢来访，这是我的第一篇博客文章，今后我会不断更新博客内容！</p>
<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>hexo d部署网站时出现错误Error: Spawn failed(生成失败)</title>
    <url>/2021/09/10/%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E6%97%B6%E5%87%BA%E7%8E%B0Error-Spawn-failed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>关于博客使用过程中，进行远端部署时使用<code>hexo d</code>指令后可能会遇到的错误有很多，其中最常见的就是类似于下面<code>Error: Spawn failed</code>的错误。</p>
<span id="more"></span>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nothing to commit, working tree clean</span><br><span class="line">fatal: unable to access &#x27;https://github.com/DinGHaoGG/DinGHaoGG.github.io.git/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>这个错误的大致意思是不能够进入远端部署的网址，同时生成失败。以下解决方法只适用于已正确配置SSH的情况下。<br>解决方法:<br>&emsp;1.更换网络，用稳定的网络，避免因网络不流畅而导致部署超时。<br>&emsp;2.如果未关闭用<code>hexo s</code>命令打开的本地网页，到浏览器中关闭刚刚打开的网页。<br>&emsp;3.重新使用三件套<code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code>。<br>其中<code>hexo g</code>和<code>hexo d</code>指令可以直接使用<code>hexo g -d</code>这一条指令代替，效果是一样的。<br>如果对hexo的指令不熟悉可以查看<a href="https://hexo.io/zh-cn/docs/commands" title="Hexo指令文档">Hexo官方文档</a>。<br>最后完成部署的结果如下:INFO Deploy done: git</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习笔记</title>
    <url>/2023/05/27/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="这是B站上的一个三小时快速入门Python的学习笔记-用于我对该视频中所涉及的知识点进行快速的回顾与复习"><a href="#这是B站上的一个三小时快速入门Python的学习笔记-用于我对该视频中所涉及的知识点进行快速的回顾与复习" class="headerlink" title="这是B站上的一个三小时快速入门Python的学习笔记,用于我对该视频中所涉及的知识点进行快速的回顾与复习"></a>这是B站上的一个<a href="https://www.bilibili.com/video/BV1944y1x7SW?p=1&vd_source=716af32224fdabb7cca0b5d457c8cafa">三小时快速入门Python</a>的学习笔记,用于我对该视频中所涉及的知识点进行快速的回顾与复习</h2><h1 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h1><h2 id="1-字符串连接"><a href="#1-字符串连接" class="headerlink" title="1.字符串连接"></a>1.字符串连接</h2><p><code>print()</code>函数里的字符串可用加号<code>+</code>来连接<br>例如:<code>print(&quot;hello&quot;+&quot; world&quot;)</code></p>
<h2 id="2-单双引号转义"><a href="#2-单双引号转义" class="headerlink" title="2.单双引号转义"></a>2.单双引号转义</h2><p>当输出<code>print(&quot;hello &quot;world&quot;&quot;)</code>时系统会报错,因为判定<code>&quot;hello &quot;</code>为一个字符串并将其输出,就不知道后面的<code>world&quot;&quot;</code>是什么了,所以为了解决这个问题我们可以单双引号结合使用例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello &#x27;world&#x27;&quot;)</span><br><span class="line">print(&#x27;hello &quot;world&quot;&#x27;)</span><br></pre></td></tr></table></figure>
<p>又或者是直接使用转义字符\</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;He said \&quot;Let\&#x27;s go!\&quot;&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="3-换行"><a href="#3-换行" class="headerlink" title="3.换行"></a>3.换行</h2><p>换行的时候不能直接在代码里换行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello</span><br><span class="line">world&quot;)</span><br></pre></td></tr></table></figure>
<p>这样运行会报错的,正确的换行因该是使用\n转义字符来换行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello\nworld&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="4-三引号跨行字符串"><a href="#4-三引号跨行字符串" class="headerlink" title="4.三引号跨行字符串"></a>4.三引号跨行字符串</h2><p>遇到要换多行的时候可以使用三引号来输出整段的内容<br>使用print()来换多行输出一首诗:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;白日依山尽&quot;)</span><br><span class="line">print(&quot;黄河入海流&quot;)</span><br><span class="line">print(&quot;欲穷千里目&quot;)</span><br><span class="line">print(&quot;更上一层楼&quot;)</span><br></pre></td></tr></table></figure>
<p>或是使用多个\n来逐行输出,这些方法都太麻烦了,可以直接把内容放在 <code>&quot;&quot;&quot;</code>里,来实现跨行的字符串输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;&quot;&quot;白日依山尽</span><br><span class="line">黄河入海流</span><br><span class="line">欲穷千里目</span><br><span class="line">更上一层楼</span><br><span class="line">&quot;&quot;&quot;)</span><br></pre></td></tr></table></figure>


<h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h1><h2 id="1-变量的赋值"><a href="#1-变量的赋值" class="headerlink" title="1.变量的赋值"></a>1.变量的赋值</h2><p>Python语句的执行是从上到下的,因此变量需要先定义后使用,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_numb = &quot;123&quot;</span><br><span class="line">print(&quot;我的手机号是&quot;+my_numb)</span><br></pre></td></tr></table></figure>
<p>必须先定义my_numb才能print输出,否则会报错<br>其次就是变量里的值是可变的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_numb = &quot;123&quot;</span><br><span class="line">print(&quot;我的手机号是&quot; + my_numb)</span><br><span class="line">my_new_numb = my_numb</span><br><span class="line">print(&quot;我的手机号是&quot; + my_new_numb)</span><br><span class="line">print(&quot;我的手机号是&quot; + my_numb)</span><br><span class="line">my_numb = &quot;456&quot;</span><br><span class="line">print(&quot;我的手机号是&quot; + my_numb)</span><br></pre></td></tr></table></figure>
<p>运行这段代码可以发现,我们可以把变量的值赋给其他变量,也可以直接修改变量里的值</p>
<h2 id="2-变量的命名"><a href="#2-变量的命名" class="headerlink" title="2.变量的命名"></a>2.变量的命名</h2><p>在Python中变量的命名一般使用下划线命名法如:<br><code>user_name</code>和<code>user_age</code>这些直观的命名,不要用拼音和abc来命名,且命名的时候只能用字母、数字和下划线来命名,且第一个字符不能是数字</p>
<h1 id="3-数学运算"><a href="#3-数学运算" class="headerlink" title="3.数学运算"></a>3.数学运算</h1><p>正常的加<code>+</code>减<code>-</code>乘<code>*</code>除<code>/</code>都可以在键盘上输入,</p>
<blockquote>
<p>优先级为:<code>( )</code>&gt; <code>**</code> &gt; <code>*</code> 和 <code>/</code> &gt; <code>+</code> 和 <code>-</code></p>
</blockquote>
<p>其中<code>**</code>为乘方,2的三次方可以用<code>2**3</code>来表示<br>但是对于一些复杂的公式我们可以导入math库来使用数学公式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math #首先需要导入math库</span><br><span class="line">math.函数名(...)</span><br></pre></td></tr></table></figure>
<p>通过以上这样的方式来使用,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">a=-1</span><br><span class="line">b=-2</span><br><span class="line">c=3</span><br><span class="line">print((-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a))</span><br><span class="line">print((-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a))</span><br></pre></td></tr></table></figure>
<p>其中的sqrt()函数是开方函数</p>
<h1 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h1><p>良好的注释习惯可以帮助自己和他人理解代码</p>
<blockquote>
<p><code>#</code> 单行注释  </p>
</blockquote>
<blockquote>
<p><code>&quot;&quot;&quot;</code><br>  多行注释<br><code>&quot;&quot;&quot;</code></p>
</blockquote>
<h1 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5.数据类型"></a>5.数据类型</h1><table>
<thead>
<tr>
<th>数据类型</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td>字符串 str</td>
<td align="center">“Hello” “哟!”</td>
</tr>
<tr>
<td>整数 int</td>
<td align="center">6 或 -3</td>
</tr>
<tr>
<td>浮点数 float</td>
<td align="center">6.0 或 10.07</td>
</tr>
<tr>
<td>布尔类型 bool</td>
<td align="center">True 或 Fales</td>
</tr>
<tr>
<td>空值类型 NoneType</td>
<td align="center">None</td>
</tr>
</tbody></table>
<p>之后会讲到列表、字典等  </p>
<h2 id="字符串str"><a href="#字符串str" class="headerlink" title="字符串str"></a>字符串str</h2><p>可以用<code>len()</code>函数获取字符串的长度</p>
<blockquote>
<p>len(‘6’)<br>=&gt; 3<br>len(‘hi!!’)<br>=&gt; 4<br>len(‘\n’)<br>=&gt; 1 转义字符只算一个字符  </p>
</blockquote>
<p>也可以提取字符串中的单个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = &quot;hello&quot;</span><br><span class="line">print(str[1]) </span><br><span class="line"></span><br><span class="line">=&gt; e</span><br></pre></td></tr></table></figure>

<h2 id="使用type-函数来返回该对象的类型"><a href="#使用type-函数来返回该对象的类型" class="headerlink" title="使用type()函数来返回该对象的类型"></a>使用type()函数来返回该对象的类型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = &quot;hello&quot;</span><br><span class="line">print(type(str)) </span><br><span class="line"></span><br><span class="line">=&gt; &lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="6-input"><a href="#6-input" class="headerlink" title="6.input()"></a>6.input()</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = input(&quot;你几岁了?\n&quot;)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">输入12</span><br><span class="line">=&gt;12</span><br></pre></td></tr></table></figure>
<p><code>int()</code>、<code>float()</code>、<code>str()</code>函数可以把内容转换为对应的数据类型,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = input(&quot;你几岁了?\n&quot;)</span><br><span class="line">print(&quot;您10年后会是&quot;+str(int(age)+10)+&quot;岁&quot;)</span><br></pre></td></tr></table></figure>
<p>先把输入的字符串装换为<code>int</code>类型进行计算,之后输出的时候再以<code>str</code>类型进行输出</p>
<h1 id="7-条件语句if"><a href="#7-条件语句if" class="headerlink" title="7.条件语句if"></a>7.条件语句if</h1><h2 id="1-条件语句的格式"><a href="#1-条件语句的格式" class="headerlink" title="1.条件语句的格式"></a>1.条件语句的格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 条件:</span><br><span class="line">    执行语句</span><br><span class="line">    执行语句</span><br><span class="line">else:</span><br><span class="line">    执行语句</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure>
<p>具体运用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = int(input(&quot;输入一个数来判断与60的大小关系&quot;))</span><br><span class="line">if i &gt;= 60:</span><br><span class="line">    print(&quot;大与等于60&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;小于60&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="2-嵌套条件语句"><a href="#2-嵌套条件语句" class="headerlink" title="2.嵌套条件语句"></a>2.嵌套条件语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 条件:</span><br><span class="line">    执行语句</span><br><span class="line">    if 条件:</span><br><span class="line">        执行语句</span><br><span class="line">    else:</span><br><span class="line">        执行语句</span><br><span class="line">else:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure>
<h2 id="3-多条件判断"><a href="#3-多条件判断" class="headerlink" title="3.多条件判断"></a>3.多条件判断</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 条件:</span><br><span class="line">    执行语句</span><br><span class="line">elif 条件:</span><br><span class="line">    执行语句</span><br><span class="line">elif 条件:</span><br><span class="line">    执行语句</span><br><span class="line">else:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure>

<p>综合循环和多条件实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = int(input(&quot;输入你的成绩\n&quot;))</span><br><span class="line">if a &gt;= 90:</span><br><span class="line">    print(&quot;优秀&quot;)</span><br><span class="line">elif 60 &lt;= a &lt;= 90:</span><br><span class="line">    print(&quot;良好&quot;)</span><br><span class="line">    if 60 &lt;= a &lt;=70:</span><br><span class="line">        print(&quot;虽然良好但是还需要努力哟&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;加油特种兵争取到优秀&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;不及格&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="8-逻辑运算"><a href="#8-逻辑运算" class="headerlink" title="8.逻辑运算"></a>8.逻辑运算</h1><blockquote>
<p><code>and</code> 一假则假<br><code>or</code>  一真则真<br><code>not</code> 取bool的反值</p>
</blockquote>
<p>实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = input(&quot;输入你的性别\n&quot;)</span><br><span class="line">b = input(&quot;年龄\n&quot;)</span><br><span class="line">if a == &quot;男&quot; or a == &quot;女&quot;:</span><br><span class="line">    print(&quot;你是人&quot;)</span><br><span class="line">    if a == &quot;男&quot; and int(b) &gt;= 18:</span><br><span class="line">        print(&quot;是成年男人&quot;)</span><br><span class="line">    elif not a == &quot;男&quot;:</span><br><span class="line">        print(&quot;是女人&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="9-列表"><a href="#9-列表" class="headerlink" title="9.列表"></a>9.列表</h1><h2 id="1-列表的使用"><a href="#1-列表的使用" class="headerlink" title="1.列表的使用"></a>1.列表的使用</h2><blockquote>
<p>name_list = [“张三”,”李四”,”王五”]<br>print(name_list)<br>name_list.<code>append</code>(“老六”)<br>name_list.<code>remove</code>(“张三”)<br>print(name_list[0])</p>
</blockquote>
<p>其中<code>append</code>添加列表元素,<code>remove</code>移除列表元素</p>
<h2 id="2-数字列表的使用"><a href="#2-数字列表的使用" class="headerlink" title="2.数字列表的使用"></a>2.数字列表的使用</h2><blockquote>
<p>num_list = [25,22,33]<br>max_num = <code>max</code>(num_list)<br>min_num = <code>min</code>(num_list)<br>sorted_num = <code>sorted</code>(num_list)<br>print(max_num,min_num,sorted_num)</p>
</blockquote>
<p>其中<code>max</code>函数输出列表中的最大值,<code>sorted</code>函数输出从小到大排好序的列表</p>
<h1 id="10-字典"><a href="#10-字典" class="headerlink" title="10.字典"></a>10.字典</h1><h2 id="1-字典的使用"><a href="#1-字典的使用" class="headerlink" title="1.字典的使用"></a>1.字典的使用</h2><blockquote>
<p>字典名 = {键 : 值 , 键 : 值}</p>
</blockquote>
<p>其中,字典里的键必须是不可变的数据类型,不能使用变量来作为键</p>
<h3 id="键和值用-冒号来对应"><a href="#键和值用-冒号来对应" class="headerlink" title="键和值用:冒号来对应"></a>键和值用<code>:</code>冒号来对应</h3><blockquote>
<p>contacts = {“张三”:18,”李四”:15,”王五”:17}<br>print(“张三的岁数是”,<code>contacts[&quot;张三&quot;]</code>)  </p>
</blockquote>
<p>可以用<code>contacts[&quot;老六&quot;]=19</code>来新建字典元素</p>
<h3 id="当出现键的名称相同时-比如通讯录中有多个张三-可以用元组tuple-张三-21-来作为字典里的键-例如"><a href="#当出现键的名称相同时-比如通讯录中有多个张三-可以用元组tuple-张三-21-来作为字典里的键-例如" class="headerlink" title="当出现键的名称相同时,比如通讯录中有多个张三,可以用元组tuple=(张三,21)来作为字典里的键,例如:"></a>当出现键的名称相同时,比如通讯录中有多个张三,可以用元组<code>tuple=(张三,21)</code>来作为字典里的键,例如:</h3><blockquote>
<p>contacts = {<code>(&quot;张三&quot;,18)</code>:1111111111,<br>            (“张三”,17):222222222,<br>            (“张三”,16):3333333333}<br>print(contacts<code>[&quot;张三&quot;,18]</code>)<br>=&gt;11111111</p>
</blockquote>
<h2 id="2-字典的操作"><a href="#2-字典的操作" class="headerlink" title="2.字典的操作"></a>2.字典的操作</h2><h3 id="in操作"><a href="#in操作" class="headerlink" title="in操作"></a>in操作</h3><blockquote>
<p>“张三” <code>in</code> contacts</p>
</blockquote>
<p><code>in</code>可以判断键是否在字典里,然后返回一个bool值</p>
<h3 id="del操作"><a href="#del操作" class="headerlink" title="del操作"></a>del操作</h3><blockquote>
<p><code>del</code> contacts[“张三”,18]</p>
</blockquote>
<p><code>del</code>可以删除字典中该键值的内容</p>
<h3 id="字典名操作"><a href="#字典名操作" class="headerlink" title="字典名操作"></a>字典名操作</h3><p>字典名.<code>values()</code> #返回所有值<br>字典名.<code>keys()</code> #返回字典里所有的键<br>字典名.<code>iteams()</code> #返回所有的键值对</p>
<h2 id="3-字典小练习"><a href="#3-字典小练习" class="headerlink" title="3.字典小练习"></a>3.字典小练习</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;网络热门词汇查询&quot;)</span><br><span class="line">words = &#123;&quot;yyds&quot;:&quot;永远滴神&quot;,&quot;xswl&quot;:&quot;笑死我了&quot;&#125;</span><br><span class="line">words[&quot;老六&quot;] = &quot;狗&quot;</span><br><span class="line">w = input(&quot;清输入查询的词汇\n&quot;)</span><br><span class="line">if w in words:</span><br><span class="line">    print(words[w])</span><br><span class="line">else:</span><br><span class="line">    print(&quot;词库目前只有&quot;+str(len(words))+&quot;个词,你搜索的词还未收录&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="11-for循环"><a href="#11-for循环" class="headerlink" title="11.for循环"></a>11.for循环</h1><blockquote>
<p><code>for</code> 变量名 <code>in</code> 可迭代的对象  </p>
</blockquote>
<p>输出0到5,示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(0,6):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<p>其中<code>range(起始值,结束值,步长)</code>函数是整数数列</p>
<blockquote>
<p><code>range</code>( 0 , 6 )</p>
</blockquote>
<p>以上表示0到5的数列,其中起始值是0,结束值是6,步长默认为1,range()函数的元素里不包括结束值6</p>
<h1 id="12-while循环"><a href="#12-while循环" class="headerlink" title="12.while循环"></a>12.while循环</h1><p><code>for</code>循环需要有明确的循环对象或次数,但<code>while</code>循环可以在循环次数未知的情况下一直循环直至跳出循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while 条件A:</span><br><span class="line">    行动B</span><br></pre></td></tr></table></figure>
<p>当A为真时执行B,直至A为假时跳出循环</p>
<p>具体示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total = 0</span><br><span class="line">count = 0</span><br><span class="line">user_input = input(&quot;请输入几个数,来计算平均值,输入q退出\n&quot;)</span><br><span class="line">while user_input != &#x27;q&#x27;:</span><br><span class="line">    total += float(user_input)</span><br><span class="line">    count += 1</span><br><span class="line">    user_input = input(&quot;请输入几个数,来计算平均值,输入q退出\n&quot;)</span><br><span class="line">if count == 0:</span><br><span class="line">    print(&quot;已退出&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(total/count)</span><br></pre></td></tr></table></figure>

<h1 id="13-字符串格式化"><a href="#13-字符串格式化" class="headerlink" title="13.字符串格式化"></a>13.字符串格式化</h1><h2 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h2><p>语法:”{ }”.format<br><code>format</code>函数对于字符串的格式化:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;我叫&#123;0&#125;,我今年&#123;1&#125;&quot;.format(&quot;小明&quot;,18))</span><br></pre></td></tr></table></figure>

<p>保留两位小数的一般方法为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 0.123456</span><br><span class="line">print(&quot;%.2f&quot;%a)</span><br></pre></td></tr></table></figure>
<p>当然也可使用<code>format</code>方法,如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 0.123456</span><br><span class="line">print(&quot;&#123;:.2f&#125;&quot;.format(a))</span><br></pre></td></tr></table></figure>

<h2 id="f-字符串"><a href="#f-字符串" class="headerlink" title="f-字符串"></a>f-字符串</h2><p>也可以在字符串前面加字母f来实现字符串的格式化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &quot;小明&quot;</span><br><span class="line">b = 18</span><br><span class="line">print(f&quot;我叫&#123;a&#125;,我今年&#123;b&#125;&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="14-函数"><a href="#14-函数" class="headerlink" title="14.函数"></a>14.函数</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式:"></a>语法格式:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def 函数名:</span><br><span class="line">    函数内容</span><br></pre></td></tr></table></figure>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add(a1, a2):</span><br><span class="line">    print(a1 + a2)</span><br><span class="line"></span><br><span class="line">add(1, 2)</span><br></pre></td></tr></table></figure>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>使用return可以返回值,并且可以用变量来接收函数的返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add(a1, a2):</span><br><span class="line">    return a1+a2</span><br><span class="line"></span><br><span class="line">print(add(1, 2))</span><br></pre></td></tr></table></figure>

<h1 id="15-模块的引入"><a href="#15-模块的引入" class="headerlink" title="15.模块的引入"></a>15.模块的引入</h1><h2 id="方法1-使用import语句"><a href="#方法1-使用import语句" class="headerlink" title="方法1:使用import语句"></a>方法1:使用import语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">math.函数名(...)</span><br></pre></td></tr></table></figure>
<h2 id="方法2-使用from…import…语句"><a href="#方法2-使用from…import…语句" class="headerlink" title="方法2:使用from…import…语句"></a>方法2:使用from…import…语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line">sqrt( )</span><br></pre></td></tr></table></figure>
<p>这样就不用在前面加<code>math.</code>了</p>
<h2 id="方法3-使用from…import"><a href="#方法3-使用from…import" class="headerlink" title="方法3:使用from…import*"></a>方法3:使用from…import*</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from math import*</span><br><span class="line">sqrt( )</span><br></pre></td></tr></table></figure>
<p>但第二种和第三种在使用的时候会出现和其他库里的函数产生命名冲突或是混淆的情况,比如不知道是哪个库的函数,同时在代码上也不直观</p>
<h1 id="16-类和对象"><a href="#16-类和对象" class="headerlink" title="16.类和对象"></a>16.类和对象</h1><h2 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h2><p>格式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名:</span><br><span class="line">    def __init__(self,属性,属性) #构造函数</span><br><span class="line">        内容</span><br></pre></td></tr></table></figure>
<p>类名一般首字母大写  </p>
<blockquote>
<p>对象的创建: 对象名=类名(属性,属性)<br>对象的属性: 对象名.属性</p>
</blockquote>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat1 = Cat(&quot;汤姆&quot;,12)</span><br><span class="line">print(f&quot;小猫的名字叫&#123;cat1.name&#125;,今年&#123;cat1.age&#125;岁啦&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="2-类方法"><a href="#2-类方法" class="headerlink" title="2.类方法"></a>2.类方法</h2><p>需要再类里进行定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名:</span><br><span class="line">    def __init__(self,属性,属性) #构造函数</span><br><span class="line">        内容</span><br><span class="line">    def 类方法名(self):</span><br><span class="line">        内容</span><br></pre></td></tr></table></figure>
<p>使用时:</p>
<blockquote>
<p>对象名.类方法(参数,参数)</p>
</blockquote>
<h2 id="3-类的综合应用"><a href="#3-类的综合应用" class="headerlink" title="3.类的综合应用"></a>3.类的综合应用</h2><p>定义学生类有学生的姓名、学号和成绩,创建设置成绩和输出成绩的类方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    def __init__(self, s_name, s_id):</span><br><span class="line">        self.s_name = s_name</span><br><span class="line">        self.s_id = s_id</span><br><span class="line">        self.grades = &#123;&quot;语文&quot;: 0, &quot;数学&quot;: 0, &quot;英语&quot;: 0&#125;</span><br><span class="line"></span><br><span class="line">    def set_grades(self, course, grade):</span><br><span class="line">        if course in self.grades:</span><br><span class="line">            self.grades[course] = grade</span><br><span class="line"></span><br><span class="line">    def print_grades(self):</span><br><span class="line">        print(f&quot;姓名:&#123;self.s_name&#125; &quot; + f&quot;学号:&#123;self.s_id&#125;&quot;)</span><br><span class="line">        for i in self.grades:</span><br><span class="line">            print(f&quot;&#123;i&#125; &#123;self.grades[i]&#125;分&quot;)</span><br><span class="line"></span><br><span class="line">s1 = Student(&quot;张三&quot;, &quot;1111111111&quot;)</span><br><span class="line">s1.set_grades(&quot;语文&quot;, 80)</span><br><span class="line">s1.set_grades(&quot;数学&quot;, 60)</span><br><span class="line">s1.print_grades()</span><br></pre></td></tr></table></figure>

<h2 id="4-继承"><a href="#4-继承" class="headerlink" title="4.继承"></a>4.继承</h2><p>子类会继承父类的属性和方法<br>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 子类名(父类名):</span><br><span class="line">    def __init__(self,属性,属性...)</span><br><span class="line">        super().__init__(属性,属性...)</span><br><span class="line">        内容</span><br></pre></td></tr></table></figure>
<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Employee: #员工类</span><br><span class="line">    def __init__(self,name,id):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.id = id</span><br><span class="line"></span><br><span class="line">    def print_info(self):</span><br><span class="line">        print(f&quot;员工姓名:&#123;self.name&#125; 员工工号:&#123;self.id&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class FullTimeEmployee(Employee): #全时员工子类</span><br><span class="line">    def __init__(self,name,id,monthly_salary):</span><br><span class="line">        super().__init__(name,id)</span><br><span class="line">        self.monthly_salary = monthly_salary</span><br><span class="line"></span><br><span class="line">    def pay(self):</span><br><span class="line">        return self.monthly_salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PartTimeEmployee(Employee): #实时员工子类</span><br><span class="line">    def __init__(self,name,id,daily,salary):</span><br><span class="line">        super().__init__(name,id)</span><br><span class="line">        self.daily = daily</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    def pay(self):</span><br><span class="line">        return self.salary * self.daily</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = FullTimeEmployee(&quot;张三&quot;,&quot;111&quot;,5000)</span><br><span class="line">lisi = PartTimeEmployee(&quot;李四&quot;,&quot;222&quot;,500,10)</span><br><span class="line">zs.print_info()</span><br><span class="line">lisi.print_info()</span><br><span class="line">print(f&quot;张三的工资:&#123;zs.pay()&#125;&quot;)</span><br><span class="line">print(f&quot;李四的工资:&#123;lisi.pay()&#125;&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="17-文件的操作"><a href="#17-文件的操作" class="headerlink" title="17.文件的操作"></a>17.文件的操作</h1><h2 id="1-文件的路径"><a href="#1-文件的路径" class="headerlink" title="1.文件的路径"></a>1.文件的路径</h2><p>绝对路径:在根目录下的路径<br>C:\user</p>
<p>相对路径:文件现对于当前文件的目录<br>父目录<code>..\</code></p>
<h2 id="2-文件的操作"><a href="#2-文件的操作" class="headerlink" title="2.文件的操作"></a>2.文件的操作</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>变量 = open(“路径”,”r”,encoding=”<code>utf-8</code>“)<br><code>r</code>只读<br><code>w</code>只写<br>encoding=”<code>utf-8</code>“  </p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>1.<code>read(字节数)</code>函数,读取内容并打印<br>2.<code>readline()</code>读取一行返回一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&quot;./data.txt&quot;,&quot;r&quot;,encoding=&quot;`utf-8`&quot;)</span><br><span class="line">line = f.readline()</span><br><span class="line">while line != &quot;&quot;:</span><br><span class="line">    print(line)</span><br><span class="line">    line = f.readline()</span><br></pre></td></tr></table></figure>
<p>3.<code>readlines()</code>读取全部文件内容,并返回行列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&quot;./data.txt&quot;,&quot;r&quot;,encoding=&quot;`utf-8`&quot;)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">for line in lines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>
<h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>1.文件变量名.<code>close()</code></p>
<p>2.<code>with</code> open(“./data.txt”) <code>as</code> f:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f.read)</p>
<p>使用<code>with</code>…<code>as</code>语句在执行完里面的语句后子自动关闭文件</p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p><code>w</code>写入模式(会覆盖原文件)<br><code>a</code>附加模式(接着原来的文件写入)</p>
<p><code>write()</code>函数不会换行</p>
<p>如果既要读取也要写入可以使用<code>r+</code><br><code>r+</code>打开一个文件用于读写。文件指针将会放在文件的<code>开头</code>。</p>
<p><code>a+</code>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的<code>结尾</code>。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</p>
<p>更多文件操作模式在菜鸟教程里查看<a href="https://www.runoob.com/python3/python3-file-methods.html">https://www.runoob.com/python3/python3-file-methods.html</a></p>
<h1 id="18-异常处理"><a href="#18-异常处理" class="headerlink" title="18.异常处理"></a>18.异常处理</h1><p>语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    执行代码</span><br><span class="line">except:</span><br><span class="line">    发生异常时执行的代码</span><br></pre></td></tr></table></figure>
<p>异常处理的应用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    user_weight = float(input(&quot;请输入您的体重:&quot;))</span><br><span class="line">     user_height = float(input(&quot;请输入您的身高:&quot;))</span><br><span class="line">     user_BMI = user_weight / user_height ** 2</span><br><span class="line">except ValueError: #输入值异常捕捉</span><br><span class="line">    print(&quot;输入了不合理的数字,请重新运行程序并输入正确的数字&quot;)</span><br><span class="line">except ZeroDivisionError: #除数为零异常捕捉</span><br><span class="line">    print(&quot;输入了不合理的数字,请重新运行程序并输入正确的数字&quot;)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;发生了未知错误,请重新运行&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;您的BMI值为:&quot; + str(user_BMI))</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;程序运行结束&quot;)</span><br></pre></td></tr></table></figure>
<p><code>finally</code>无论程序正常结束与否都执行,<code>else</code>是除提及到的异常以外的其他情况</p>
<h1 id="19-测试"><a href="#19-测试" class="headerlink" title="19.测试"></a>19.测试</h1><h2 id="1-使用assert进行测试-不常用"><a href="#1-使用assert进行测试-不常用" class="headerlink" title="1.使用assert进行测试(不常用)"></a>1.使用assert进行测试(不常用)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert bool表达式</span><br></pre></td></tr></table></figure>
<p>表达式为真继续运行,表达式为假提示<code>AssertionError</code>并终止程序</p>
<h2 id="2-unittest库"><a href="#2-unittest库" class="headerlink" title="2.unittest库"></a>2.unittest库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from 测试文件名 import 测试函数或类名</span><br><span class="line">class 测试类名(unittest.TestCase) #继承自该类</span><br><span class="line">    def test_类方法名称(self):</span><br><span class="line">        测试内容</span><br></pre></td></tr></table></figure>
<p>实例:<br>需要测试的my_calculator.py文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_adder(x,y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>
<p>测试文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from my_calculator import my_adder</span><br><span class="line">class TestMyAdder(unittest.TestCase) #继承自该类</span><br><span class="line">    def test_positive_with_positive(self):</span><br><span class="line">        self.assertEqual(my_adder(5,3),8) #类中定义好的方法</span><br></pre></td></tr></table></figure>
<p>在终端输入</p>
<blockquote>
<p>python -m unittest<br>就可以看到测试结果,测试通过为<code>·</code>,不通过为<code>F</code></p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown学习笔记</title>
    <url>/2023/05/20/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这是一个Markdown学习笔记,用于方便我复习和查阅具体语法</p>
<p><a href="https://www.runoob.com/markdown/md-tutorial.html">学习链接</a></p>
<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><h2 id="方式1-使用-号来表示1-6级标题"><a href="#方式1-使用-号来表示1-6级标题" class="headerlink" title="方式1:使用#号来表示1~6级标题"></a>方式1:使用<code>#</code>号来表示1~6级标题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>…</p>
<h2 id="方式2-在标题后换行并添加-来表示一级标题、-来表示二级标题-例如"><a href="#方式2-在标题后换行并添加-来表示一级标题、-来表示二级标题-例如" class="headerlink" title="方式2:在标题后换行并添加===来表示一级标题、---来表示二级标题,例如"></a>方式2:在标题后换行并添加<code>===</code>来表示一级标题、<code>---</code>来表示二级标题,例如</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一级标题</span><br><span class="line">===</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<h1 id="这是一级标题-1"><a href="#这是一级标题-1" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h1 id="2-段落换行"><a href="#2-段落换行" class="headerlink" title="2.段落换行"></a>2.段落换行</h1><h2 id="方式1-在第一行后面添加两个空格并换行"><a href="#方式1-在第一行后面添加两个空格并换行" class="headerlink" title="方式1:在第一行后面添加两个空格并换行"></a>方式1:在第一行后面添加两个空格并换行</h2><p>第一行(这有两个空格)<br>第二行</p>
<h2 id="方式2-在第一行后添加一个空行"><a href="#方式2-在第一行后添加一个空行" class="headerlink" title="方式2:在第一行后添加一个空行"></a>方式2:在第一行后添加一个空行</h2><p>第一行<br>(空出一行)<br>第二行</p>
<h1 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h1><h2 id="Markdown有以下3种字体，在两端加-星号实现"><a href="#Markdown有以下3种字体，在两端加-星号实现" class="headerlink" title="Markdown有以下3种字体，在两端加*星号实现"></a>Markdown有以下3种字体，在两端加<code>*</code>星号实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体*  </span><br><span class="line">**粗体**  </span><br><span class="line">***斜粗体***</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<p><em>斜体</em><br><strong>粗体</strong><br><em><strong>斜粗体</strong></em></p>
<h2 id="同时也可以用-下划线代替-星号-例如"><a href="#同时也可以用-下划线代替-星号-例如" class="headerlink" title="同时也可以用_下划线代替*星号,例如"></a>同时也可以用<code>_</code>下划线代替<code>*</code>星号,例如</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_斜体_</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:   <em>斜体</em></p>
<h1 id="4-分隔线"><a href="#4-分隔线" class="headerlink" title="4.分隔线"></a>4.分隔线</h1><h2 id="在一行中用三个以上的-星号、-减号、-下划线来建立分割线，行内不能有其他字符"><a href="#在一行中用三个以上的-星号、-减号、-下划线来建立分割线，行内不能有其他字符" class="headerlink" title="在一行中用三个以上的*星号、-减号、_下划线来建立分割线，行内不能有其他字符"></a>在一行中用三个以上的<code>*</code>星号、<code>-</code>减号、<code>_</code>下划线来建立分割线，行内不能有其他字符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下: </p>
<hr>
<hr>
<hr>
<h1 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h1><h2 id="在文字的两端加"><a href="#在文字的两端加" class="headerlink" title="在文字的两端加~~"></a>在文字的两端加<code>~~</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~这是一条删除线~~</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:<del>这是一条删除线</del></p>
<h1 id="6-下划线"><a href="#6-下划线" class="headerlink" title="6.下划线"></a>6.下划线</h1><h2 id="通过使用HTML中的-lt-u-gt-标签来实现"><a href="#通过使用HTML中的-lt-u-gt-标签来实现" class="headerlink" title="通过使用HTML中的&lt;u&gt;标签来实现"></a>通过使用HTML中的<code>&lt;u&gt;</code>标签来实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;这是一条下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:<u>这是一条下划线</u></p>
<h1 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h1><h2 id="脚注的格式为-要注明的文本"><a href="#脚注的格式为-要注明的文本" class="headerlink" title="脚注的格式为: [^要注明的文本]"></a>脚注的格式为: [^要注明的文本]</h2><p>这是一个脚注[^脚注]<br>[^脚注]:脚注的内容</p>
<h1 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h1><h2 id="1-无序列表-在前面加-星号、-加号、-减号都可以"><a href="#1-无序列表-在前面加-星号、-加号、-减号都可以" class="headerlink" title="1.无序列表,在前面加*星号、+加号、-减号都可以"></a>1.无序列表,在前面加<code>*</code>星号、<code>+</code>加号、<code>-</code>减号都可以</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<ul>
<li>第一项</li>
</ul>
<ul>
<li>第二项</li>
</ul>
<ul>
<li>第三项</li>
</ul>
<h2 id="2-有序列表，使用数字并加上-点号"><a href="#2-有序列表，使用数字并加上-点号" class="headerlink" title="2.有序列表，使用数字并加上.点号"></a>2.有序列表，使用数字并加上<code>.</code>点号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="3-嵌套列表，在子列表的前面加上四个空格"><a href="#3-嵌套列表，在子列表的前面加上四个空格" class="headerlink" title="3.嵌套列表，在子列表的前面加上四个空格"></a>3.嵌套列表，在子列表的前面加上四个空格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">    * 第一项的第一个元素</span><br><span class="line">    * 第二个元素</span><br><span class="line">2. 第二项</span><br><span class="line">    * 第二项的第一个元素</span><br><span class="line">    * 第二个元素</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<ol>
<li>第一项<ul>
<li>第一项的第一个元素</li>
<li>第二个元素</li>
</ul>
</li>
<li>第二项<ul>
<li>第二项的第一个元素</li>
<li>第二个元素</li>
</ul>
</li>
</ol>
<h1 id="9-区块"><a href="#9-区块" class="headerlink" title="9.区块"></a>9.区块</h1><h2 id="在段落开头使用-gt-大于符号"><a href="#在段落开头使用-gt-大于符号" class="headerlink" title="在段落开头使用&gt;大于符号"></a>在段落开头使用<code>&gt;</code>大于符号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;区块的使用    </span><br><span class="line">&gt;这一片区域就是区块</span><br><span class="line"></span><br><span class="line">&gt;这是第二个区块</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<blockquote>
<p>区块的使用<br>这一片区域就是区块</p>
</blockquote>
<blockquote>
<p>这是第二个区块</p>
</blockquote>
<h2 id="区块可以和列表搭配使用"><a href="#区块可以和列表搭配使用" class="headerlink" title="区块可以和列表搭配使用"></a>区块可以和列表搭配使用</h2><p>区块中使用列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;1. 第一项</span><br><span class="line">&gt;    * 第一项的子项</span><br><span class="line">&gt;2. 第二项</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<blockquote>
<ol>
<li>第一项<ul>
<li>第一项的子项</li>
</ul>
</li>
<li>第二项</li>
</ol>
</blockquote>
<p>列表中使用区块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">    &gt;这是一个区块  </span><br><span class="line">    &gt;区块内容</span><br><span class="line">2. 第二项</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<ol>
<li>第一项<blockquote>
<p>这是一个区块<br>区块内容</p>
</blockquote>
</li>
<li>第二项</li>
</ol>
<h1 id="10-代码"><a href="#10-代码" class="headerlink" title="10.代码"></a>10.代码</h1><h2 id="1-单个函数或代码片段可以在两端加上-符号"><a href="#1-单个函数或代码片段可以在两端加上-符号" class="headerlink" title="1.单个函数或代码片段可以在两端加上`符号"></a>1.单个函数或代码片段可以在两端加上<code>`</code>符号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`print()`函数</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:<code>print()</code>函数</p>
<h2 id="2-代码区块-在代码区块前加四个空格-一个tab"><a href="#2-代码区块-在代码区块前加四个空格-一个tab" class="headerlink" title="2.代码区块,在代码区块前加四个空格(一个tab)"></a>2.代码区块,在代码区块前加四个空格(一个tab)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">整个函数的前面都空出四个空格,一个·代表一个空格:</span><br><span class="line"></span><br><span class="line">····main()</span><br><span class="line">····&#123;</span><br><span class="line">····    return 0;</span><br><span class="line">····&#125;</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<pre><code>main()
&#123;
    return 0;
&#125;
</code></pre>
<h2 id="也可以用三个-来包含一段代码"><a href="#也可以用三个-来包含一段代码" class="headerlink" title="也可以用三个```来包含一段代码"></a>也可以用三个```来包含一段代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">` ` `</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line">` ` `</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="11-链接"><a href="#11-链接" class="headerlink" title="11.链接"></a>11.链接</h1><h2 id="链接名称-链接地址-或者-lt-链接地址-gt"><a href="#链接名称-链接地址-或者-lt-链接地址-gt" class="headerlink" title="[链接名称] (链接地址) 或者 &lt;链接地址&gt;"></a>[链接名称] (链接地址) 或者 &lt;链接地址&gt;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是[百度](https://www.baidu.com)的链接  </span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:<br>这是<a href="https://www.baidu.com/">百度</a>的链接<br><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<h2 id="高级链接的使用"><a href="#高级链接的使用" class="headerlink" title="高级链接的使用"></a>高级链接的使用</h2><p>这个链接用1作为网址变量[百度][1]<br>[1]:<a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<h1 id="12-图片"><a href="#12-图片" class="headerlink" title="12.图片"></a>12.图片</h1><h2 id="使用-alt-属性文本-图片地址"><a href="#使用-alt-属性文本-图片地址" class="headerlink" title="使用 ![alt 属性文本] (图片地址)"></a>使用 ![alt 属性文本] (图片地址)</h2><p>其中alt是图片的替代文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![王嘉尔](https://img1.baidu.com/it/u=304266880,560113530&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=500&amp;h=625)</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:<br>其中alt是图片的替代文字<br><img src="https://img1.baidu.com/it/u=304266880,560113530&fm=253&fmt=auto&app=120&f=JPEG?w=500&h=625" alt="王嘉尔"></p>
<p>如果需要设置图片的宽高可以使用HTML中的<code>&lt;img&gt;</code>标签</p>
<img src="https://img1.baidu.com/it/u=304266880,560113530&fm=253&fmt=auto&app=120&f=JPEG?w=500&h=625" width="50%">




<h1 id="12-表格"><a href="#12-表格" class="headerlink" title="12.表格"></a>12.表格</h1><h2 id="使用-来分隔不同的单元格-使用-来分隔表头和其他行"><a href="#使用-来分隔不同的单元格-使用-来分隔表头和其他行" class="headerlink" title="使用|来分隔不同的单元格,使用-来分隔表头和其他行"></a>使用<code>|</code>来分隔不同的单元格,使用<code>-</code>来分隔表头和其他行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<h2 id="使用-左对齐、-右对齐、-居中对齐"><a href="#使用-左对齐、-右对齐、-居中对齐" class="headerlink" title="使用:-左对齐、-:右对齐、:-:居中对齐"></a>使用<code>:-</code>左对齐、<code>-:</code>右对齐、<code>:-:</code>居中对齐</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">|:----|----:|:----:|</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<p>上面的语法的显示如下:</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>如何新建一篇博客文章</title>
    <url>/2021/10/27/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用命令生成Markdown文件"><a href="#使用命令生成Markdown文件" class="headerlink" title="使用命令生成Markdown文件"></a>使用命令生成Markdown文件</h1><h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><p>Markdown 是一种 <strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>关于Markdown的用法可以到<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程 | 菜鸟教程 (runoob.com)</a>上学习。</p>
<p>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>.</p>
<h2 id="用命令在博客目录下生成Markdown文件"><a href="#用命令在博客目录下生成Markdown文件" class="headerlink" title="用命令在博客目录下生成Markdown文件"></a>用命令在博客目录下生成Markdown文件</h2><p>在博客文件夹下，点击右键选择<code>Git Bash Here</code>，在打开的窗口中使用下方git命令生成新的页</p>
<blockquote>
<p>$ hexo n 文件名</p>
</blockquote>
<p>或</p>
<blockquote>
<p>$ hexo new 文件名</p>
</blockquote>
<p>文件名为博客文章的名称，例如生成本篇博客的命令为</p>
<blockquote>
<p>$ hexo n 如何新建一篇博客文章</p>
</blockquote>
<p>之后系统就会在默认的目录下生成你的Markdown文件，以我的博客路径为例，我的博客文件叫blog，放在D盘下，所以生成的文件的默认路径为：<code>D:\blog\source\_posts</code>，使用指定路径的git命令也会在自定义的路径下生成，关于其他的新建page的指令可以参考官方文档<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a>.</p>
<hr>
<h1 id="用Markdown编辑器编辑文件内容"><a href="#用Markdown编辑器编辑文件内容" class="headerlink" title="用Markdown编辑器编辑文件内容"></a>用Markdown编辑器编辑文件内容</h1><p>博主使用的是Typora编辑器，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。支持导出HTML、PDF、Word、图片等多种类型文件。</p>
<p>Typora 官网：<a href="https://typora.io/">Typora</a></p>
<p>可以在官网下载使用。</p>
<p>当然Markdown的编辑器有很多，不一定只局限于Typora，更多主流的编辑器可以到CSDN该博主的文章中进行参考和选择<a href="https://itrhx.blog.csdn.net/article/details/82229243">最新主流 Markdown 编辑器推荐_TRHX’S BLOG-CSDN博客_markdown编辑器推荐</a>.</p>
<p>用编辑器写好博客内容就可以直接发布啦~</p>
<p>至此关于如何新建第一篇博客文章的内容就结束了，因为博主也是刚搭建好博客不久，想把自己学到的知识记录下来，如果该文章中出现了什么错误或是对文章的内容有什么疑问，欢迎大家在下方评论。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
